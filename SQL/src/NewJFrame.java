
import java.awt.Dimension;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on Aug 15, 2010, 11:03:01 PM
 */
/**
 *
 * @author DMARK
 */
public class NewJFrame extends javax.swing.JFrame
{

    /** Creates new form NewJFrame */
    File file = new File("c:\\sp102.csv");
    JFileChooser jfc = new JFileChooser();
    ArrayList fid = new ArrayList();
    // int progressNum = 0;
    Dimension d;
    Rectangle rect;
  //  Boolean fileIsSelected=false;

    public NewJFrame()
    {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CAFE_IMPORT");
        setResizable(false);

        jLabel1.setText("Server Name");

        jTextField1.setText("GALAHAD");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("User Name");

        jTextField2.setText("CAFE_Import");

        jLabel3.setText("Password");

        jButton1.setText("Choose File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Import Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Export Modified");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField4.setEditable(false);

        jLabel4.setText("Semester");

        jLabel5.setText("1. Choose a \"CSV\" file to import data;");

        jLabel6.setText("2. Import data of \"CSV\" file into SQL Server; add new records to \"MainSchedule\" table;");

        jLabel7.setText("3. Export modified data into \"ModifiedSchedule\" table;");

        jLabel8.setText("Port");

        jTextField5.setText("1133");
        jTextField5.setPreferredSize(new java.awt.Dimension(53, 20));

        jPasswordField1.setText("cafeimport");
        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Update Enrollment");

        jButton4.setText("Update Enrollment");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel9.setText("4. Update enrollment of schedule.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField4)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel3))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jCheckBox1))
                        .addGap(66, 66, 66))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                        .addGap(332, 332, 332))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jCheckBox1))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel7))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextField1ActionPerformed
    {//GEN-HEADEREND:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        try
        {
            jfc.setCurrentDirectory(new File("c:\\"));
            jfc.setFileSelectionMode(0);
            int state = jfc.showOpenDialog(null);
            if (state == 1)
            {
                return;
            } else
            {
                file = jfc.getSelectedFile();
            }
            InputStream in = null;
            String[] getLine = new String[14];

            in = new FileInputStream(file);
            CsvFileParser csv = new CsvFileParser(in);
            if (csv.hasMore())
            {
                getLine = csv.getCurrLine(); // read the very first line
            }

            jTextField4.setText(getLine[1]);
            int lineNum = 1;
            while (csv.hasMore())
            {
                lineNum++;
            }

            jProgressBar1.setMaximum(lineNum);
            d = jProgressBar1.getSize();
            rect = new Rectangle(0, 0, d.width, d.height);


        } catch (IOException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }




    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
    {//GEN-HEADEREND:event_jButton3ActionPerformed
        try
        {
            AddToModified();
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        //BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(file)));

        if(jTextField4.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Please select a valid input file!");
            return;
        }

        InputStream in = null;
        try
        {
            String[] preLine = new String[14];
            String[] temp = new String[14];

            String line = null;
            in = new FileInputStream(file);
            CsvFileParser csv = new CsvFileParser(in);

            if (csv.hasMore())
            {
                preLine = csv.getCurrLine();
                int value = jProgressBar1.getValue();
                jProgressBar1.setValue(value + 1);

                jProgressBar1.paintImmediately(rect);

                // read the very first line
            }
            if (!preLine[4].equals("C"))
            {
                AddToSQL(preLine);
                int value = jProgressBar1.getValue();
                jProgressBar1.setValue(value + 1);
                jProgressBar1.paintImmediately(rect);

                // if status not 'C', save this record to sql server
            }
            while (csv.hasMore())
            {
                temp = csv.getCurrLine(); // get next record
                if (temp[4].equals("C"))      // status = c
                {
                    System.out.println("class canceled");
                    continue;
                }

                if (temp[11].equals(""))   // faculty network id = null
                {
                    //   this line is continue with previous line
                    if (temp[0].equals(""))     // section is null
                    {
                        for (int i = 0; i < 8; i++)
                        {
                            if (temp[i].equals(""))
                            {
                                temp[i] = preLine[i]; // fill the empty cell of the record by copying preLine
                            }
                        }
                        for (int i = 9; i < temp.length; i++)
                        {
                            if (temp[i].equals(""))
                            {
                                temp[i] = preLine[i];
                            }
                        }



                        if (temp[8].equals(""))
                        {
                            System.out.println("invalid data");
                            continue;
                        }
                        if (temp[8].equals(preLine[8]))
                        {
                            System.out.println("invalid data");
                            continue;
                        }
                        if (!temp[9].equals(""))
                        {
                            if (!temp[9].equals(preLine[9]))
                            {
                                System.out.println("invalid data");
                                continue;
                            }
                        }

                        temp[8] = preLine[8] + "," + temp[8]; // combine the meetingDays with preLine


                    } else                    // fid null, section not null, drop line
                    {
                        System.out.println("invalid data");
                        continue;
                    }

                } else if (temp[0].equals(""))
                {
                    for (int i = 0; i < temp.length; i++)
                    {
                        if (temp[i].equals(""))
                        {
                            temp[i] = preLine[i]; // fill the empty cell of the record by copying preLine
                        }
                    }
                }
                for (int i = 0; i < temp.length; i++)
                {
                    preLine[i] = temp[i];
                }
                AddToSQL(temp); // save this record to sql
                for (int i = 0; i < temp.length; i++)
                {
                    System.out.print(temp[i] + " ");
                }
                System.out.println();
                System.out.println(csv.getCurrLineNum());

                int value = jProgressBar1.getValue();
                jProgressBar1.setValue(value + 1);
                jProgressBar1.paintImmediately(rect);
            }
            
            int value = jProgressBar1.getMaximum();
            jProgressBar1.setValue(value);
            jProgressBar1.paintImmediately(rect);
            JOptionPane.showMessageDialog(rootPane, "Finish importing!");
            // if null of day. copy preLine

            // if teacher different
            // null? day or teacher
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally
        {
            try
            {
                in.close();
            } catch (IOException ex)
            {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // if null of day. copy preLine

        // if teacher different






        //null? day or teacher




    }//GEN-LAST:event_jButton2ActionPerformed

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jPasswordField1ActionPerformed
    {//GEN-HEADEREND:event_jPasswordField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed

        if(jTextField4.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Please select a valid input file!");
            return;
        }

        InputStream in = null;
        try
        {
            String[] preLine = new String[14];
            String[] temp = new String[14];

            String line = null;
            in = new FileInputStream(file);
            CsvFileParser csv = new CsvFileParser(in);

            if (csv.hasMore())
            {
                preLine = csv.getCurrLine();
                int value = jProgressBar1.getValue();
                jProgressBar1.setValue(value + 1);

                jProgressBar1.paintImmediately(rect);

                // read the very first line
            }
            if (!preLine[4].equals("C"))
            {
                Update(preLine);
                int value = jProgressBar1.getValue();
                jProgressBar1.setValue(value + 1);
                jProgressBar1.paintImmediately(rect);

                // if status not 'C', save this record to sql server
            }
            while (csv.hasMore())
            {
                temp = csv.getCurrLine(); // get next record
                if (temp[4].equals("C"))      // status = c
                {
                    System.out.println("class canceled");
                    continue;
                }
                if(temp[14] == null)
                {
                    continue;
                }

                if (temp[11].equals(""))   // faculty network id = null
                {
                    //   this line is continue with previous line
                    if (temp[0].equals(""))     // section is null
                    {
                        for (int i = 0; i < 8; i++)
                        {
                            if (temp[i].equals(""))
                            {
                                temp[i] = preLine[i]; // fill the empty cell of the record by copying preLine
                            }
                        }
                        for (int i = 9; i < temp.length; i++)
                        {
                            if (temp[i].equals(""))
                            {
                                temp[i] = preLine[i];
                            }
                        }



                        if (temp[8].equals(""))
                        {
                            System.out.println("invalid data");
                            continue;
                        }
                        if (temp[8].equals(preLine[8]))
                        {
                            System.out.println("invalid data");
                            continue;
                        }
                        if (!temp[9].equals(""))
                        {
                            if (!temp[9].equals(preLine[9]))
                            {
                                System.out.println("invalid data");
                                continue;
                            }
                        }

                        temp[8] = preLine[8] + "," + temp[8]; // combine the meetingDays with preLine


                    } else                    // fid null, section not null, drop line
                    {
                        System.out.println("invalid data");
                        continue;
                    }

                } else if (temp[0].equals(""))
                {
                    for (int i = 0; i < temp.length; i++)
                    {
                        if (temp[i].equals(""))
                        {
                            temp[i] = preLine[i]; // fill the empty cell of the record by copying preLine
                        }
                    }
                }
                for (int i = 0; i < temp.length; i++)
                {
                    preLine[i] = temp[i];
                }
                Update(temp); // save this record to sql
                for (int i = 0; i < temp.length; i++)
                {
                    System.out.print(temp[i] + " ");
                }
                System.out.println();
                System.out.println(csv.getCurrLineNum());

                int value = jProgressBar1.getValue();
                jProgressBar1.setValue(value + 1);
                jProgressBar1.paintImmediately(rect);
            }

            int value = jProgressBar1.getMaximum();
            jProgressBar1.setValue(value);
            jProgressBar1.paintImmediately(rect);
            JOptionPane.showMessageDialog(rootPane, "Finish importing!");
            // if null of day. copy preLine

            // if teacher different
            // null? day or teacher
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex)
        {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally
        {
            try
            {
                in.close();
            } catch (IOException ex)
            {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }



    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

    public void AddToSQL(String[] input2) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException
    {
        //look up other table to fill the input data

        String[] input = new String[15];

        if(input2.length==14)
        {
            for(int i = 0 ; i< 13; i ++)
                input[i]=input2[i];

            input[13]="";
            input[14]=input2[13];
        }
        else
        {
            input=input2;
        }
        
        //then insert sql
        String sql, sql2;
        Connection conn;
        Statement stmt;
        ResultSet rs, rs2, rsBIO;
        int facultyID = 0;
        int termID = 0;
        String location = null;

        String type = null;


        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
/*
        String url = "jdbc:sqlserver://206.180.209.79:1133;DatabaseName=CAFE";
        String user = "CAFE_Import";
        String password = "gannon123";
 */
/*        String url = "jdbc:sqlserver://localhost:1433;DatabaseName=CAFE";
        String user = "sa";
        String password = "111111";
        
  */
        String url = "jdbc:sqlserver://" + jTextField1.getText() + ":"+jTextField5.getText()+";DatabaseName=CAFE";
        String user = jTextField2.getText();
        String password = jPasswordField1.getText();
         
        conn = DriverManager.getConnection(url, user, password);
        stmt = conn.createStatement();

        //fill termID
        String year = "20" + input[1].substring(0, 2);
        String semester = null;
        if (input[1].substring(3).equals("FA"))
        {
            semester = "Fall";
        } else if (input[1].substring(3).equals("SP"))
        {
            semester = "Spring";
        } else if (input[1].substring(3).equals("SU"))
        {
            semester = "Summer";
        }
        sql = "select * from Term where Semester=" + "'" + semester + "'" + " and " + "Year=" + "'" + year + "'";
        rs = stmt.executeQuery(sql);
        if (rs.next())
        {
            termID = rs.getInt(1);
        }  else
        {
            System.out.println("invalid Term " + semester );     // current faculty is not in Faculty table
            return;
        }
        //System.out.println(termID);


        // CreatedDate
        SimpleDateFormat sDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        String createdDate = sDateFormat.format(new java.util.Date());

        // fill facultyID
        sql = "select * from Faculty where NetworkID=" + "'" + input[11] + "'";
        // sql = "select * from Faculty where NetworkID='wwww'";
        rs = stmt.executeQuery(sql);
        if (rs.next())
        {
            facultyID = rs.getInt(1);

            // write record to MainSchedule table

            sql2 = "select * from MainSchedule where FacultyID=" + "'" + facultyID + "' and TermID=" + termID;
            //System.out.println(sql);
            rs2 = stmt.executeQuery(sql2);
            if (!rs2.next())
            {
                String status = new String("S");
                int overloadcredits = 0;
                int releaseTime = 0;

                sql2 = "insert into MainSchedule(facultyid, status,overloadcredits, ReleaseTime, termid, createddate) "
                        + "values " + "('" + facultyID + "','" + status + "','" + overloadcredits + "','" + releaseTime + "','" + termID + "','" + createdDate + "')";
                stmt.execute(sql2);
            }
        } else
        {
            System.out.println("invalid FacultyID");     // current faculty is not in Faculty table
            return;                                      // then, drop current line
        }
        // System.out.println(facultyID);

        // combine location
        if (input[6].equals("BY-"))
        {
            location = "By Appointment";
        } else if (input[6].equals("IN"))
        {
            location = "Internet";
        } //        else if (input[6].equals("OC"))
        //        {
        //            location = "Clinic";
        //        }
        else
        {
            location = input[6] + " " + input[7];
        }
        // System.out.println(location);

        // deal with student credits
        if (input[12].equals("1-3"))
        {
            input[12] = "1";
            input[13] = "0.00";
        } else if (input[12].equals("3-6"))
        {
            input[12] = "3";
            input[13] = "0.00";
        } else if (input[12].equals("2-3"))
        {
            input[12] = "2";
            input[13] = "0.00";
        } else if (input[12].equals("1-4"))
        {
            input[12] = "1";
            input[13] = "0.00";
        } else if (input[12].equals("1-9"))
        {
            input[12] = "1";
            input[13] = "0.00";
        } else if (input[13].isEmpty()&&(!input[12].isEmpty()))
        {            
            input[13] = input[12];
        }

        // deal with '
        if (input[3].contains("'"))
        {
            input[3] = input[3].replace("'", "''");
        }

        // initiate TeamTaught
        String teamTaught = "False";



        // 如果已有，update
        // 如果没有， insert

            //guan here is to make change
            int Stc=0;
            double Tc=0.0;
           

            String sqlBIOL;
            sqlBIOL = "select * from Biolabcredits where coursecode = left('"+input[2]+"',8)";

            rsBIO = stmt.executeQuery(sqlBIOL);
            if (rsBIO.next())
            {
               Tc = rsBIO.getFloat(3);
               input[13]= Double.toString(Tc);
               Stc = rsBIO.getInt(4);
               input[12]= Integer.toString(Stc);
            }
       
             
           
            sqlBIOL = "select * from BioCourseType where coursecode = left('"+input[2]+"',8)";
            type = "";
            rsBIO = stmt.executeQuery(sqlBIOL);
            if (rsBIO.next())
            {
                type = rsBIO.getString(3);

            }



        
        // search whether exist already
        sql = "select * from Schedule where Section=" + "'" + input[0] + "'" + " and " + "FacultyID=" + "'" + facultyID + "'";
        rs = stmt.executeQuery(sql);
        if (rs.next())               //record exist, update old one, only if modifyday = null
        {
            Date d = rs.getDate(13);
            if (d == null)
            {
                if(jCheckBox1.isSelected())
                {
                    sql = "UPDATE Schedule SET MeetingDays=" + "'" + input[8] + "'" + ", Enrollment = "+"'" +input[14]+ "'"+" where Section=" + "'" + input[0] + "'" + " and " + "FacultyID=" + "'" + facultyID + "'";
                }else
                {
                    sql = "UPDATE Schedule SET MeetingDays=" + "'" + input[8] + "'" + " where Section=" + "'" + input[0] + "'" + " and " + "FacultyID=" + "'" + facultyID + "'";
                }

                System.out.println(sql);
                stmt.execute(sql);
            } else
            {
                System.out.println("Record has been modified");
            }

        } else                           // no exist, insert new one
        {
           
            sql = "insert into Schedule(FacultyID,TermID,CourseCode,"
                    + "CourseTitle,Section,TeachingCredits,"
                    + "StudentCredits,Status,Location,"
                    + "TeamTaught,CreatedDate,OtherFaculty,"
                    + "MeetingDays,StartTime,EndTime,"
                    + "Enrollment,FacultyNetWorkID,"
                    + "type) "
                    + "values "
                    + "('" + facultyID + "','" + termID + "','" + input[2] + "','" 
                    + input[3] + "','" + input[0] + "','" + input[13] + "','" 
                    + input[12] + "','" + input[4] + "','" + location + "','" 
                    + teamTaught + "','" + createdDate + "','" + "','"
                    + input[8] + "','" + input[9] + "','" + input[10] + "','"
                    + input[14] + "','" + input[11]+"','"+ type + "')";
              System.out.print("sql:" + sql + "\n")      ;
            stmt.execute(sql);
        }



        rs.close();
        stmt.close();
        conn.close();


    }

    public void AddToModified() throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException
    {
        String sql, sql2;
        Connection conn;
        Statement stmt, stmt2;
        ResultSet rs;

        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
        String url = "jdbc:sqlserver://" + jTextField1.getText() + ":"+jTextField5.getText()+";DatabaseName=CAFE";
        String user = jTextField2.getText();
        String password = jPasswordField1.getText();
        conn = DriverManager.getConnection(url, user, password);
        stmt = conn.createStatement();
        stmt2 = conn.createStatement();


        sql = "drop table Schedule_Modified";
        stmt.execute(sql);
        sql = "select * into Schedule_Modified from Schedule where ModifiedDate !=''";
        stmt.execute(sql);

        JOptionPane.showMessageDialog(rootPane, "DONE!");

        //jProgressBar1.setValue(100);

    }

        public void Update(String[] input) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException
    {
        //look up other table to fill the input data

        //then insert sql
        String sql;
        Connection conn;
        Statement stmt;
        ResultSet rs;


        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
/*
        String url = "jdbc:sqlserver://206.180.209.79:1133;DatabaseName=CAFE";
        String user = "CAFE_Import";
        String password = "gannon123";
 */
/*        String url = "jdbc:sqlserver://localhost:1433;DatabaseName=CAFE";
        String user = "sa";
        String password = "111111";

  */
        String url = "jdbc:sqlserver://" + jTextField1.getText() + ":"+jTextField5.getText()+";DatabaseName=CAFE";
        String user = jTextField2.getText();
        String password = jPasswordField1.getText();

        conn = DriverManager.getConnection(url, user, password);
        stmt = conn.createStatement();


        sql = "select * from Schedule where Section=" + "'" + input[0] + "'";
        rs = stmt.executeQuery(sql);
        if (rs.next())
        {

            sql = "UPDATE Schedule SET Enrollment = "+"'" +input[14]+ "'"+" where Section=" + "'" + input[0] + "'" ;
            stmt.execute(sql);
        
        }else
        {
            System.out.println("No this record");
            return;
        }
        //System.out.println(termID);

        rs.close();
        stmt.close();
        conn.close();


    }
}
